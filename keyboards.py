from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from math import ceil

def main_menu_kb(is_admin: bool = False) -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"), KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
    ]
    if is_admin:
        keyboard.append([KeyboardButton(text="–ê–¥–º–∏–Ω")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def contact_kb() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True)],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

def products_list_kb(items: list[dict], page: int, total: int, page_size: int) -> InlineKeyboardMarkup:
    rows = []
    for it in items:
        price_rub = it["price_minor"] // 100
        rows.append([InlineKeyboardButton(
            text=f"üîç {it['title']} ‚Äî {price_rub} ‚ÇΩ",
            callback_data=f"view:{it['id']}:p:{page}"
        )])
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pages = max(1, ceil(total / max(1, page_size)))
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"plist:{page-1}"))
    if page < pages:
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"plist:{page+1}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=rows or [[InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç", callback_data="noop")]])

def product_detail_kb(prod_id: int, page: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{prod_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"plist:{page}")]
    ])

def cart_kb(has_items: bool) -> InlineKeyboardMarkup:
    rows = []
    if has_items:
        rows.append([InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        rows.append([InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart_clear")])
    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="plist:1")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def delivery_kb(courier_fee_minor: int) -> InlineKeyboardMarkup:
    fee_rub = courier_fee_minor // 100
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ (0 ‚ÇΩ)", callback_data="deliv:pickup")],
        [InlineKeyboardButton(text=f"–ö—É—Ä—å–µ—Ä ({fee_rub} ‚ÇΩ –ø–æ –≥–æ—Ä–æ–¥—É)", callback_data="deliv:courier")]
    ])

def admin_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="adm:add_product")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="adm:list_products")],
        [InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ", callback_data="adm:orders")],
        [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="adm:tariff")]
    ])

def admin_products_kb(products: list[dict]) -> InlineKeyboardMarkup:
    rows = []
    for p in products:
        status = "ON" if p["available"] else "OFF"
        price = int(round(p["price_minor"] / 100))
        rows.append([InlineKeyboardButton(
            text=f"#{p['id']} {p['title']} ‚Äî {price} ‚ÇΩ [{status}]",
            callback_data=f"adm:prod:{p['id']}"
        )])
    if not rows:
        rows = [[InlineKeyboardButton(text="–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", callback_data="noop")]]
    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ (–ê–¥–º–∏–Ω)", callback_data="adm:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def admin_product_actions_kb(prod_id: int, available: int) -> InlineKeyboardMarkup:
    toggle_text = "–í—ã–∫–ª—é—á–∏—Ç—å (OFF)" if available else "–í–∫–ª—é—á–∏—Ç—å (ON)"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"adm:prod:rename:{prod_id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"adm:prod:price:{prod_id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"adm:prod:photo:{prod_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"adm:prod:photo_del:{prod_id}")],
        [InlineKeyboardButton(text=toggle_text, callback_data=f"adm:prod:toggle:{prod_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"adm:prod:delete:{prod_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="adm:list_products")]
    ])
